package com.electricityBillingSystem.services;

import java.math.BigInteger;
import java.sql.SQLIntegrityConstraintViolationException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.persistence.PersistenceException;

import com.electricityBillingSystem.beans.Bill;
import com.electricityBillingSystem.beans.User;
import com.electricityBillingSystem.dao.AdminDAO;
import com.electricityBillingSystem.dao.IAdminDAO;
import com.electricityBillingSystem.exceptions.DuplicateEntryException;

import static com.electricityBillingSystem.util.ReadUserData.getIntegerValue;
import static com.electricityBillingSystem.util.ReadUserData.getLongValue;
import static com.electricityBillingSystem.util.ReadUserData.getStringValue;
import static com.electricityBillingSystem.util.ReadUserData.getDateValue;

import static com.electricityBillingSystem.util.InputValidatorUtil.validateName;
import static com.electricityBillingSystem.util.InputValidatorUtil.validateDob;
import static com.electricityBillingSystem.util.InputValidatorUtil.validatePhoneNumber;
import static com.electricityBillingSystem.util.InputValidatorUtil.validateEmail;

import static com.electricityBillingSystem.util.ElectricityBillingSystemUtil.closeApplication;
import static com.electricityBillingSystem.util.ElectricityBillingSystemUtil.adminLogout;

public class AdminServices implements IAdminServices {

	String line = new String(new char[40]).replace('\0', '-');

	@Override
	public void adminHomePage(User user) throws Exception {

		System.out.println("________________________________________");
		System.out.println("********** Admin Home Page *************");
		System.out.println("________________________________________");
		System.out.println("1. Generate Bills");
		System.out.println("2. View Unpaid Bills");
		System.out.println("3. Add New Connection");
		System.out.println("4. View Customers");
		System.out.println("5. View Your profile");
		System.out.println("6. View Connection Request");
		System.out.println("7. Logout");
		System.out.println("8. Close Application");
		System.out.println("________________________________________");
		int option = getIntegerValue("Option: ");

		switch (option) {
		case 1:
			generateBill(user);
			break;
		case 2:
			viewUnpaidBills(user);
			break;
		case 3:
			try {
				addNewCustomer(user);
			} catch (DuplicateEntryException e) {
				System.out.println(e.getMessage());
				adminHomePage(user);
			}
			break;
		case 4:
			displayAllUsers(user);
			break;
		case 5:
			displayAdminInformation(user);
			break;
		case 6:
			displayConnectionRequest(user);
			break;
		case 7:
			adminLogout(user);
			break;
		case 8:
			closeApplication();
			break;
		default:
			System.out.println("Please choose a correct option..\n");
			adminHomePage(user);
			break;

		}

	}

	@Override
	public void displayAdminInformation(User user) throws Exception {
		System.out.println("________________________________________");
		System.out.println("************** Your Profile ************");
		System.out.println("________________________________________\n");
		System.out.println("Admin ID: " + user.getId());
		System.out.println("Full Name: " + user.getName());

		String pattern = "dd MMM yyyy";
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
		String date = simpleDateFormat.format(user.getDob());

		System.out.println("Date of Birth: " + date);
		System.out.println("Mobile Number: " + user.getPhoneNumber());
		System.out.println("Email: " + user.getEmail());
		System.out.println("Address: " + user.getAddress());
		System.out.println("\n****************************************");
		System.out.println("2. Back to Home");
		System.out.println("3. Logout");
		System.out.println("4. Close Application");
		System.out.println("________________________________________");
		int option = getIntegerValue("Option: ");

		switch (option) {
		case 1:
			adminHomePage(user);
			break;
		case 2:
			adminLogout(user);
			break;
		case 3:
			closeApplication();
			break;
		default:
			System.out.println("Please choose a correct option..\n");
			displayAdminInformation(user);
			break;
		}
	}

	@Override
	public void addNewCustomer(User adminUser) throws Exception {

		System.out.println("________________________________________");
		System.out.println("***** New Connection Registration ******");
		System.out.println("________________________________________\n");

		String name = validateName(getStringValue("Full Name*: "));
		String email = validateEmail(getStringValue("Email*: "));
		long phoneNumber = validatePhoneNumber(getLongValue("Contact Number*: "));
		String phone = "" + phoneNumber;
		String address = getStringValue("Address: ");
		Date dob = validateDob(getDateValue("Date of Birth* (like 20 JAN 2000): "));
		int meterId = getIntegerValue("Meter Id: ");
		System.out.println("Enter 1 for ADMIN\nEnter 2 for USER");
		int roleId = getIntegerValue("Role: ");

		User user = new User();

		user.setName(name);
		user.setEmail(email);
		user.setPhoneNumber(phone);
		user.setAddress(address);
		user.setDob(dob);
		user.setMeterId(meterId);
		user.setRoleId(roleId);
		user.setStatus(1);

		IAdminDAO adminDao = new AdminDAO();
		try {
			adminDao.registerNewCustomer(user);
			System.out.println("Successfull...");
		} catch (SQLIntegrityConstraintViolationException | DuplicateEntryException | PersistenceException e) {
			throw new DuplicateEntryException();
		}
		adminHomePage(adminUser);
	}

	public void displayAllUsers(User user) throws Exception {

		IAdminDAO adminDao = new AdminDAO();
		List<Object[]> customerList = adminDao.getAllCustomers();

		System.out.println("________________________________________");
		System.out.println("************** EBS Customers ***********");
		for (Object[] customer : customerList) {

			System.out.println(line);
			System.out.println("\nId: " + customer[0]);
			System.out.println("Name: " + customer[1]);
			System.out.println("Phone Number: " + customer[2]);
			System.out.println("Email: " + customer[3]);
			System.out.println("Date of Birth: " + customer[4]);
			System.out.println("Address: " + customer[5]);
			System.out.println("Meter Number: " + customer[6]);
			System.out.println("Connection Date: " + customer[9]);
		}

		System.out.println("\n****************************************");
		System.out.println("1. Back to Home");
		System.out.println("2. Logout");
		System.out.println("3. Close Application");
		System.out.println("________________________________________");
		int option = getIntegerValue("Option: ");

		switch (option) {
		case 1:
			adminHomePage(user);
			break;
		case 2:
			adminLogout(user);
			break;
		case 3:
			closeApplication();
			break;
		default:
			System.out.println("Please choose a correct option..\n");
			displayAllUsers(user);
			break;
		}

	}

	@Override
	public void generateBill(User user) throws Exception {

		System.out.println("________________________________________");
		System.out.println("************** Bill Generator **********");
		System.out.println("________________________________________");
		String customerId = getStringValue("Customer Id: ");
		System.out.println("________________________________________");
		User customer = searchCustomerById(customerId);
		if (customer == null) {
			System.out.println("Unable to find Customer.\nPlease check the Id..");
			generateBill(user);
		} else {
			boolean flag = checkForCurrentMonthBill(customerId);
			if(flag == false) {
				System.out.println("This month bill is already generated..");
				System.out.println("\n****************************************");
				System.out.println("1. Back to Home");
				System.out.println("2. Logout");
				System.out.println("3. Close Application");
				System.out.println("________________________________________");
				int option = getIntegerValue("Option: ");
				switch (option) {
				case 1:
					adminHomePage(user);
					break;
				case 2:
					adminLogout(user);
					break;
				case 3:
					closeApplication();
					break;
				default:
					System.out.println("Please choose a correct option..\n");
					adminHomePage(user);
					break;
				}
				
			} else {
				double dueAmount = calculateDue(customerId);
				System.out.println("________________________________________");
				System.out.println("Generating Bill For: ");
				System.out.println("Customer Name: " + customer.getName());
				System.out.println("For any query call Customer on " + customer.getPhoneNumber());
				System.out.println("________________________________________\n");
				int unitConsumed = getIntegerValue("Enter Unit Consumed: ");
				System.out.println("________________________________________\n");
				double billToPay = 0.0;
				double currentAmount = 0.0;
				if (unitConsumed < 100) {
					currentAmount = unitConsumed * 1.20;
					billToPay = currentAmount + dueAmount;
				}
				// check whether the units are less than 300
				else if (unitConsumed < 300) {
					currentAmount = (100 * 1.20 + (unitConsumed - 100) * 2);
					billToPay = currentAmount + dueAmount;
				}
				// check whether the units are greater than 300
				else if (unitConsumed > 300) {
					currentAmount = (100 * 1.20 + 200 * 2 + (unitConsumed - 300) * 3);
					billToPay = currentAmount + dueAmount;
				}
				
				System.out.println("Current Amount: " + currentAmount);
				System.out.println("Previous due Amount: " + dueAmount);
				System.out.println("Total Amount: " + billToPay);
				System.out.println("________________________________________\n");
				
				Bill generatedBill = new Bill();
				generatedBill.setUserId(customer.getId());
				generatedBill.setUnit(unitConsumed);
				generatedBill.setPrice(billToPay);
				generatedBill.setPaymentStatus("not done");
				generatedBill.setPaymentDate(null);
	
				saveBill(generatedBill);
				adminHomePage(user);
			}
		}

	}

	@Override
	public User searchCustomerById(String customerId) {

		IAdminDAO adminDao = new AdminDAO();
		User customer = adminDao.searchCustomerById(customerId);
		return customer;

	}

	@Override
	public void saveBill(Bill generatedBill) {

		IAdminDAO adminDao = new AdminDAO();
		adminDao.saveBill(generatedBill);
		System.out.println("Bill added into the system..");

	}

	@Override
	public void viewUnpaidBills(User user) throws Exception {
		IAdminDAO adminDao = new AdminDAO();
		List<Object[]> unpaidBills = adminDao.getUnpaidBills();
		System.out.println("________________________________________");
		System.out.println("************** EBS Customers ***********");
		for (Object[] bill : unpaidBills) {

			System.out.println(line);
			System.out.println("\nBill Id: " + bill[0]);
			System.out.println("Unit: " + bill[2]);
			System.out.println("price: " + bill[3]);
			System.out.println("Generated Date: " + bill[4]);
			System.out.println("User Id: " + bill[1]);

		}
		System.out.println("\n****************************************");
		System.out.println("1. Back to Home");
		System.out.println("2. Logout");
		System.out.println("3. Close Application");
		System.out.println("________________________________________");
		int option = getIntegerValue("Option: ");

		switch (option) {
		case 1:
			adminHomePage(user);
			break;
		case 2:
			adminLogout(user);
			break;
		case 3:
			closeApplication();
			break;
		default:
			System.out.println("Please choose a correct option..\n");
			viewUnpaidBills(user);
			break;
		}

	}

	@Override
	public boolean checkForCurrentMonthBill(String customerId) {

		IAdminDAO adminDao = new AdminDAO();
		List<Object[]> lastBillMonthObject = adminDao.checkCurrentMonthBill(customerId);
		Integer lastBillMonth = 0;
		for(Object lastBill : lastBillMonthObject) {
			lastBillMonth = ((BigInteger) lastBill).intValue();
		}
		//System.out.println("last_bill"+lastBillMonth);
		
		Date today = new Date();
		Calendar cal = Calendar.getInstance();
		cal.setTime(today);
		int currentMonth = cal.get(Calendar.MONTH)+1;
		//System.out.println("**" + currentMonth);
		
		if(currentMonth==lastBillMonth){
			//System.out.println("Inside if");
			return false;
		}
		//System.out.println("Outside if");
		return true;
	}

	@Override
	public double calculateDue(String customerId) {
		IAdminDAO adminDao = new AdminDAO();
		List<Object[]> unpaidBillsList = adminDao.calculateDue(customerId);
		double due = 0.0;
		for(Object[] unpaidBill : unpaidBillsList) {
			double dueAmount  = ((Number)unpaidBill[2]).doubleValue();
			//System.out.println("bill Due : " + dueAmount);
			due = due + dueAmount;
		}
		//System.out.println("Total due: " + due);
		return due;
	}

}
